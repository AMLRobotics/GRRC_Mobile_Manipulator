# syntax=docker/dockerfile:1
FROM nvidia/cuda:11.4.1-cudnn8-devel-ubuntu20.04

# https://ykarma1996.tistory.com/93
ARG DEBIAN_FRONTEND=noninteractive

# nvidia-container-runtime!
# ENV NVIDIA_VISIBLE_DEVICES \
#     ${NVIDIA_VISIBLE_DEVICES:-all}
# ENV NVIDIA_DRIVER_CAPABILITIES \
#     ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

# https://github.com/ekorudiawan/Docker-ROS-OpenCV-CUDA/blob/master/Dockerfile
# install packages
RUN apt-get update && apt-get install -q -y \
    dirmngr \
    gnupg2 \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list

# install bootstrap tools
# python3 http://wiki.ros.org/rosdep

RUN apt-get update && apt-get install --no-install-recommends -y \
    python3-rosdep \
    python3-rosinstall \
    && rm -rf /var/lib/apt/lists/*

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# bootstrap rosdep
RUN rosdep init \
    && rosdep update

# install ros packages
ENV ROS_DISTRO noetic
RUN apt-get update && apt-get install -y \
    ros-noetic-desktop-full* \
    && rm -rf /var/lib/apt/lists/*

# setup entrypoint
RUN apt-get update && apt-get install -y terminator
RUN apt-get update && apt-get install -y git
RUN git clone https://github.com/Han4515/ros_entrypoint.git /entry
RUN chmod +x /entry/ros_entrypoint.sh
# COPY ./ros_entrypoint.sh /

ENTRYPOINT ["/entry/ros_entrypoint.sh"]
CMD ["bash"]




##################################################################

# Install Packages for Installing Python Packages
RUN /bin/bash -c "apt-get update -y &&\
    apt-get install -y apt-utils &&\
    apt-get install -y python3-pip &&\
    apt-get install -y python3-all-dev &&\
    apt-get install -y python3-rospkg &&\
    apt-get install -y ros-noetic-desktop-full --fix-missing"

# apt-get install -y git was moved!
RUN /bin/bash -c "apt-get update -y &&\
    apt-get install -y build-essential &&\
    apt-get install -y libssl-dev &&\
    apt-get install -y libffi-dev &&\
    apt-get install -y libxml2-dev &&\
    apt-get install -y libxslt1-dev &&\
    apt-get install -y zlib1g-dev"


RUN /bin/bash -c "echo "Test9"" 

# Create catkin workspace
# Install UR Robot Driver
RUN /bin/bash -c "apt-get update &&\
    source /opt/ros/noetic/setup.bash &&\
    mkdir -p ~/catkin_ws/src && cd ~/catkin_ws &&\
    git clone https://github.com/Han4515/Universal_Robots_ROS_Driver.git src/Universal_Robots_ROS_Driver &&\
    cd ~/catkin_ws/src/Universal_Robots_ROS_Driver && git pull origin master && cd ~/catkin_ws &&\
    git clone -b calibration_devel https://github.com/fmauch/universal_robot.git src/fmauch_universal_robot &&\
    sudo apt update -qq &&\
    rosdep update &&\
    rosdep install --from-paths src --ignore-src -y &&\
    cd ~/catkin_ws &&\
    catkin_make &&\
    source devel/setup.bash"

# Install Pynput Package for Keyboard Input Control
RUN python3 -m pip install pynput


# Install Cartesian Controller Packages
RUN /bin/bash -c "apt-get update &&\
    source /opt/ros/noetic/setup.bash &&\
    cd ~/catkin_ws &&\
    git clone https://github.com/UniversalRobots/Universal_Robots_ROS_cartesian_control_msgs.git src/Universal_Robots_ROS_cartesian_control_msgs &&\
    git clone https://github.com/UniversalRobots/Universal_Robots_ROS_controllers_cartesian.git src/Universal_Robots_ROS_controllers_cartesian &&\
    sudo apt update -qq &&\
    rosdep update &&\
    rosdep install --from-paths src --ignore-src -y &&\
    catkin_make &&\
    source devel/setup.bash"


# Install scipy
RUN python3 -m pip install scipy

# Additional for UR
RUN /bin/bash -c "apt-get update -y &&\
    apt-get install -y python3-tk &&\
    apt-get install -y tk-dev"


# # UR B
# ##########################################################
# Create catkin workspace
# Install UR Robot Driver
RUN /bin/bash -c "apt-get update &&\
    source /opt/ros/noetic/setup.bash &&\
    mkdir -p ~/catkin_ws2/src && cd ~/catkin_ws2 &&\
    git clone https://github.com/Han4515/Universal_Robots_ROS_Driver.git src/Universal_Robots_ROS_Driver &&\
    cd ~/catkin_ws2/src/Universal_Robots_ROS_Driver && git pull origin master && cd ~/catkin_ws2 &&\
    git clone -b calibration_devel https://github.com/fmauch/universal_robot.git src/fmauch_universal_robot &&\
    sudo apt update -qq &&\
    rosdep update &&\
    rosdep install --from-paths src --ignore-src -y &&\
    cd ~/catkin_ws2 &&\
    catkin_make &&\
    source devel/setup.bash"

# Install Cartesian Controller Packages
RUN /bin/bash -c "apt-get update &&\
    source /opt/ros/noetic/setup.bash &&\
    cd ~/catkin_ws2 &&\
    git clone https://github.com/UniversalRobots/Universal_Robots_ROS_cartesian_control_msgs.git src/Universal_Robots_ROS_cartesian_control_msgs &&\
    git clone https://github.com/UniversalRobots/Universal_Robots_ROS_controllers_cartesian.git src/Universal_Robots_ROS_controllers_cartesian &&\
    sudo apt update -qq &&\
    rosdep update &&\
    rosdep install --from-paths src --ignore-src -y &&\
    catkin_make &&\
    source devel/setup.bash"


# VISION LIBRARY
##########################################################

# Install Realsense Library
RUN python3 -m pip install pyrealsense2
RUN /bin/bash -c "apt-get update -y &&\
    apt-get install -y ros-noetic-realsense2*"


# RUN python3 -m pip install opencv-python DO NOT INSTALL!!
# apt-get install -y libqt4-dev &&\ DEAD 20.04
# apt-get install -y libqt4-opengl-dev &&\ DEAD 20.04
# Install OpenCV Library
RUN /bin/bash -c "apt-get update -y &&\
    apt-get install -y wget &&\
    apt-get install -y libgtk2.0-dev &&\
    apt-get install -y libjpeg-dev &&\
    apt-get install -y libtiff5-dev &&\
    apt-get install -y libopenexr-dev &&\
    apt-get install -y cmake &&\
    apt-get install -y python3-numpy &&\
    apt-get install -y libtbb-dev &&\
    apt-get install -y libeigen3-dev &&\
    apt-get install -y yasm &&\
    apt-get install -y libfaac-dev &&\
    apt-get install -y libopencore-amrnb-dev &&\
    apt-get install -y libopencore-amrwb-dev &&\
    apt-get install -y libtheora-dev &&\
    apt-get install -y libvorbis-dev &&\
    apt-get install -y libxvidcore-dev &&\
    apt-get install -y libx264-dev &&\
    apt-get install -y sphinx-common &&\
    apt-get install -y texlive-latex-extra &&\
    apt-get install -y libv4l-dev &&\
    apt-get install -y libdc1394-22-dev &&\
    apt-get install -y libavcodec-dev &&\
    apt-get install -y libavformat-dev &&\
    apt-get install -y libswscale-dev &&\
    apt-get install -y unzip"

RUN /bin/bash -c "mkdir opencv &&\
    cd opencv &&\
    wget -O opencv-4.4.0.zip https://github.com/opencv/opencv/archive/4.4.0.zip &&\
    wget -O opencv_contrib-4.4.0.zip https://github.com/opencv/opencv_contrib/archive/4.4.0.zip"

RUN /bin/bash -c "cd opencv &&\
    unzip opencv-4.4.0.zip &&\
    unzip opencv_contrib-4.4.0.zip"

RUN /bin/bash -c "cd opencv/opencv-4.4.0 &&\
    mkdir build &&\
    cd build &&\
    cmake \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local\
        \
        -D WITH_IPP=OFF\
        -D WITH_1394=OFF\
        -D BUILD_WITH_DEBUG_INFO=OFF\
        -D BUILD_DOCS=OFF\
        -D INSTALL_C_EXAMPLES=ON\
        -D INSTALL_PYTHON_EXAMPLES=ON\
        -D BUILD_EXAMPLES=OFF\
        -D BUILD_PACKAGE=OFF\
        -D BUILD_TESTS=OFF\
        -D BUILD_PERF_TESTS=OFF\
        -D WITH_QT=OFF\
        -D WITH_GTK=ON\
        -D WITH_OPENGL=ON\
        -D BUILD_opencv_python3=ON\
        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.4.0/modules\
        -D WITH_V4L=ON\
        -D WITH_FFMPEG=ON\
        -D WITH_XINE=ON\
        -D OPENCV_ENABLE_NONFREE=ON\
        -D BUILD_NEW_PYTHON_SUPPORT=ON\
        -D OPENCV_SKIP_PYTHON_LOADER=ON\
        -D OPENCV_GENERATE_PKGCONFIG=ON\
        \
        -D WITH_TBB=ON \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_CUBLAS=1 \
        -D WITH_CUDA=ON \
        -D BUILD_opencv_cudacodec=OFF \
        -D WITH_CUDNN=ON \
        -D OPENCV_DNN_CUDA=ON \
        -D CUDA_ARCH_BIN=8.6 \
        -D WITH_GSTREAMER=ON \
        -D OPENCV_PC_FILE_NAME=opencv.pc \
        .. &&\
    make -j4 &&\
    sudo make install &&\
    sudo ldconfig"

# ADDITIONAL LIBRARY : PCL Etc...
##########################################################
RUN /bin/bash -c "apt-get update -y &&\
    apt install -y python3-pcl &&\
    apt install -y pcl-tools &&\
    apt install -y ros-noetic-imu-tools"
RUN /bin/bash -c "apt-get update -y &&\
    apt install -y libegl1 &&\
    apt install -y libgl1 &&\
    apt install -y libgomp1"

RUN /bin/bash -c "echo "Test1"" 

# RUN python3 -m pip install --no-cache-dir --upgrade --user open3d
RUN pip install --upgrade pip
RUN python3 -m pip install --no-cache-dir --upgrade --user open3d